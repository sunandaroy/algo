// { Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};


Node *buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N')
        return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;)
        ip.push_back(str);

    // Create the root of the tree
    Node *root = new Node(stoi(ip[0]));

    // Push the root to the queue
    queue<Node *> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node *currNode = queue.front();
        queue.pop();

        // Get the current Node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current Node
            currNode->left = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size())
            break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current Node
            currNode->right = new Node(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}
int minTime(Node* root, int target) ;


 // } Driver Code Ends





//User function Template for C++
void TraverseTree(Node* root, unordered_map<Node*, pair<Node*, bool>> &um, pair<Node*, bool> &targetNode, int target){
    if(root == NULL){
        return;
    }
    if(root->left != NULL){
        um[root->left] = make_pair(root, false);
    }
    if(root->right != NULL){
        um[root->right]= make_pair(root, false);

    }
    if(root->data == target){
        targetNode = make_pair(root, true);
    }
        
    TraverseTree(root->left, um, targetNode, target);
    TraverseTree(root->right, um, targetNode, target);
}

int minTime(Node* root, int target) 
{
    // Your code goes here
    unordered_map<Node*, pair<Node*, bool> > um;
    pair <Node*, bool> targetNode;
    TraverseTree(root, um, targetNode, target);
    // cout << "target Node value is:" << targetNode.first->data;

    int timeCount = 0;
    queue<Node*> q;
    q.push(targetNode.first);
    um[targetNode.first].second = true;
    q.push(NULL);
    while(!q.empty()){
        Node *firedElem = q.front();
        q.pop();
        if(firedElem == NULL){
            if(!q.empty()){
                timeCount++;
                q.push(NULL);
                
            }
        }
        else{
            if(firedElem->left != NULL && um[firedElem->left].second == false){
                q.push(firedElem->left);
                um[firedElem->left].second = true;
            }
            if(firedElem->right != NULL && um[firedElem->right].second == false){
                q.push(firedElem->right);
                um[firedElem->right].second = true;
            }
            if(um[firedElem].first != NULL && um[um[firedElem].first].second== false){
                q.push(um[firedElem].first);
                um[um[firedElem].first].second = true;
            }
                
        }
    }
    return timeCount;
}


// { Driver Code Starts.


int main() 
{
    int tc;
    scanf("%d ", &tc);
    while (tc--) 
    {    
        string treeString;
        getline(cin, treeString);
        // cout<<treeString<<"\n";
        int target;
        cin>>target;
        // cout<<target<<"\n";

        Node *root = buildTree(treeString);
        cout<<minTime(root, target)<<"\n"; 

        cin.ignore();

    }


    return 0;
}
  // } Driver Code Ends
