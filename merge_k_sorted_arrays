#include<bits/stdc++.h>


#define N 105
using namespace std;

int *mergeKArrays(int arr[][N],int k);

void printArray(int arr[], int size)
{
for (int i=0; i < size; i++)
	cout << arr[i] << " ";
}

int main()
{
	int t;
	cin>>t;
	while(t--){
	    int k;
	    cin>>k;
	    int arr[N][N];
	    for(int i=0; i<k; i++){
	        for(int j=0; j<k; j++)
	        {
	            cin>>arr[i][j];
	        }
	    }
	int *output = mergeKArrays(arr, k);
	printArray(output, k*k);
	cout<<endl;
}
	return 0;
}// } Driver Code Ends


// your task is tocomplete this function
// function should return an pointer to output array int*
// of size k*k
struct element{
  int r;
  int c;
  int val;
};
typedef struct element element;


bool comp_func(element a, element b){
  return a.val > b.val;
}



int *mergeKArrays(int arr[][N], int k)
{
    vector<element> heap_arr;
    int *p = new int[k*k];
    
    for(int i=0; i<k; i++){
        element *new_element = new element;
        new_element->r = i;
        new_element->c = 0;
        new_element->val = arr[i][0];
        heap_arr.push_back(*new_element);
    }
    make_heap(heap_arr.begin(), heap_arr.end(), comp_func);

    


    for(int i=0; i< k*k; i++){
        element *elem = new element;
        pop_heap(heap_arr.begin(), heap_arr.end(), comp_func);
        *elem = heap_arr.back(); 
        // cout << "popped value is:" << elem->val;
        heap_arr.pop_back();
        p[i] = elem->val;
        if(elem->c < k-1){
          element *push_element = new element;
          push_element ->c = elem->c + 1;
          push_element -> r = elem->r;
          push_element ->val = arr[push_element ->r][push_element ->c];
        //   cout << "pushed value is:" << arr[push_element->r][push_element->c];
          heap_arr.push_back(*push_element);
          push_heap(heap_arr.begin(), heap_arr.end(), comp_func);
        }
    }
   
   return p; 
}
