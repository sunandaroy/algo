#include <bits/stdc++.h>
using namespace std;

class FindMedian
{
	public:
		void insertHeap(int &);
		double getMedian();
	private:
		double median; //Stores current median
		priority_queue<int> max; //Max heap for lower values
		priority_queue<int, vector<int>, greater<int> > min; //Min heap for greater values
		void balanceHeaps(); //Method used by insertHeap
};




// Function to insert heap
void FindMedian::insertHeap(int &x)
{
	// Your code here
	if(max.empty() || min.empty())
	    max.push(x);
	else if(x <= max.top())
	    max.push(x);
	else {
	    min.push(x);
	}
 	balanceHeaps();
	
}

// Function to balance heaps
void FindMedian::balanceHeaps()
{
	// Your code here
	if(max.size() > min.size() + 1){
	    int temp = max.top();
	    max.pop();
	    min.push(temp);
	}
	
	else if(min.size() > max.size() + 1){
	    int temp = min.top();
	    min.pop();
	    max.push(temp);
	}
	    
}
// Function to return getMedian
double FindMedian::getMedian()
{
	// Your code here
	double median;
	if(min.size() == max.size())
	    median = (min.top() + max.top())/2;
	else if(min.size() > max.size())
	    median = min.top();
	else
	    median = max.top();
    return median;
}


int main()
{
    int n, x;
    int t;
    cin>>t;
    while(t--)
    {
    	FindMedian Ans;
    	cin >> n;
    	for(int i = 1;i<= n; ++i)
    	{
    		cin >> x;
    		Ans.insertHeap(x);
    	    cout << floor(Ans.getMedian()) << endl;
    	}
    }
	return 0;
}
